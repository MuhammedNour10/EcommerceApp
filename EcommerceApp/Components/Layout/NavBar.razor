@using System.Security.Claims
@using EcommerceApp.Repository.IRepository
@using EcommerceApp.Service
@inject IShoppingCartRepo ShoppingCartRepo
@inject AuthenticationStateProvider _AuthenticationStateProvider


<nav class="navbar navbar-expand-md navbar-dark bg-dark pb-4 pt-4">
    <div class="container-fluid">
        <a class="navbar-brand" href="">
            <img src="/images/Logo.png" alt="Bootstrap" width="30" height="24">
            Tasty Table
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" >
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse" >
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" >
                        <span class="bi bi-house-door" aria-hidden="true"></span> Home
                    </NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="cart" >
                        <span class="bi bi-cart4" aria-hidden="true">(@(SharedStateServer.TotalItems))</span> 
                    </NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="order/list" >
                        <span class="bi bi-clipboard-check" aria-hidden="true"></span> Order
                    </NavLink>
                </li>
            </ul>
            <ul class="d-flex navbar-nav mb-2 mb-md-0">
                <AuthorizeView>
                    
                    <Authorized>
                        
              
                        <li class="nav-item">
                            <button class="nav-link active me-2" style="cursor: pointer; background: transparent; border: 0px;">
                                @context.User?.Identity?.Name?.Replace("@gmail.com","")
                            </button>
                        </li>
                        <li class="nav-item">
                            <form action="../Account/Logout" method="post">
                                <AntiforgeryToken/>
                                <input type="hidden" name="ReturnUrl" value=""/>
                                <button type="submit" class="nav-link btn btn-success">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                                </button>
                            </form>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        
                    
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Register">
                                <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link btn btn-success" href="Account/Login">
                                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                            </NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@code
{
    private string UserId { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var currentUserId = await IsAuthentication();
        if (currentUserId is not null)
        {
            var totalItem = await ShoppingCartRepo.CartItemsCountAsync(currentUserId);
            SharedStateServer.GetTotalItems(totalItem);
        }
    }


    private async Task<string> IsAuthentication()
    {
        var authUser = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authUser.User;
        var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (userId is not null)
        {
            UserId = userId;
            return userId;
        }

        return null;
    }

   
}
